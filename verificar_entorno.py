#!/usr/bin/env python
"""
Script para verificar que el entorno est√© correctamente configurado antes del despliegue
"""
import os
import sys
import django
from pathlib import Path

# Configurar Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tienda_musical.settings')
django.setup()

def verificar_entorno():
    """Verifica la configuraci√≥n del entorno"""
    print("üîç Verificando configuraci√≥n del entorno...")
    
    # Verificar variables de entorno cr√≠ticas
    variables_criticas = ['SECRET_KEY']
    for var in variables_criticas:
        if not os.environ.get(var):
            print(f"‚ùå Variable {var} no est√° configurada")
            return False
        else:
            print(f"‚úÖ Variable {var} configurada")
    
    # Verificar configuraci√≥n de base de datos
    from django.conf import settings
    if hasattr(settings, 'DATABASES') and settings.DATABASES:
        print("‚úÖ Configuraci√≥n de base de datos encontrada")
    else:
        print("‚ùå Configuraci√≥n de base de datos no encontrada")
        return False
    
    # Verificar archivos cr√≠ticos
    archivos_criticos = ['requirements.txt', 'build.sh', 'runtime.txt']
    for archivo in archivos_criticos:
        if (BASE_DIR / archivo).exists():
            print(f"‚úÖ Archivo {archivo} encontrado")
        else:
            print(f"‚ùå Archivo {archivo} no encontrado")
            return False
    
    # Verificar que collectstatic funciona
    try:
        from django.core.management import execute_from_command_line
        print("‚úÖ Django configurado correctamente")
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n de Django: {e}")
        return False
    
    print("\nüéâ ¬°Entorno verificado correctamente! Listo para desplegar en Render.")
    return True

if __name__ == "__main__":
    verificar_entorno()
